version: '3.4'

services:
  webfrontend:
    image: ${DOCKER_REGISTRY-}webfrontend  
    ports: ["5008:80"]
    environment:
      - ASPNETCORE_ENVIRONMENT=Staging
      #- SOME_VARS=TEST_VALUE
    depends_on: 
      - mywebapi
      - is4
    build:
      context: .
      dockerfile: WebFrontEnd/Dockerfile
  mywebapi:
    image: ${DOCKER_REGISTRY-}mywebapi    
    ports: ["5010:80"]
    depends_on: 
     # - sqlserver
      - es01
    build:
      context: .
      dockerfile: MyWebApi/Dockerfile    

  webapi2:
    image: ${DOCKER_REGISTRY-}mywebapi2    
    ports: 
      - 5011:80
    depends_on: 
      - postgres
    build:
      context: .
      dockerfile: WebApi2/Dockerfile     

  is4:
    image: ${DOCKER_REGISTRY-}is4    
    ports: 
      - 5100:80
    depends_on: 
      - postgres
    build:
      context: .
      dockerfile: AspNetCoreIdentityServer/Dockerfile     
        

  #sqlserver:  
  #  image: mcr.microsoft.com/mssql/server:latest   
  #  environment:  
  #    ACCEPT_EULA: Y  
  #    SA_PASSWORD: "BigPassw0rd"      
  #  ports: ["1433:1433"]  
  #  volumes:
  #    - datasql:/var/opt/mssql

  #postgres:  
  #  build:
  #    context: .
  #    dockerfile: PostgreTest/Dockerfile
  #  environment:  
  #    POSTGRES_PASSWORD: BigPassw0rd
  #    POSTGRES_HOST_AUTH_METHOD: trust
  #  ports: 
  #    - 5433:5432
  #  volumes:
  #    - datapostgre:/var/lib/postgresql/data

  postgres:  
    image: postgres 
    container_name: postgres01
  #  command: postgres -c config_file=/etc/postgresql/postgresql.conf
    environment:  
      POSTGRES_PASSWORD: BigPassw0rd
      POSTGRES_HOST_AUTH_METHOD: trust
    ports: 
      - 5432:5432
    volumes:
      - datapostgre:/var/lib/postgresql/data    
      
        

  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.0
    container_name: es01
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data01:/usr/share/elasticsearch/data
    ports:
      - 9200:9200   
 
  kib01:
    image: docker.elastic.co/kibana/kibana:7.10.0
    container_name: kib01
    ports:
      - 5601:5601
    environment:
      ELASTICSEARCH_URL: http://es01:9200
      ELASTICSEARCH_HOSTS: http://es01:9200
   
  rab01:
    image: "rabbitmq:3-management"
    container_name: rab01
    environment:
      - RABBITMQ_ERLANG_COOKIE='secret_cookie'    
    hostname: rab01    
    ports:
      - "15672:15672"
      - "5672:5672" 
    volumes:
      - datarab:/var/lib/rabbitmq
   

volumes:
  data01:
    driver: local
  datasql:
    driver: local
  datapostgre:
    driver: local
  datarab:
    driver: local